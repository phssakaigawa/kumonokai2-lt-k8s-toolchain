---
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${GIT_REPO}    
  triggers:
  - type: commit
  jobs:
  - name: Container build
    type: builder
    build_type: cr
    artifact_dir: output
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      #set -x

      echo -e "Build environment variables:"
      echo "REGISTRY_URL=${REGISTRY_URL}"
      echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}"
      echo "IMAGE_NAME=${IMAGE_NAME}"
      echo "BUILD_NUMBER=${BUILD_NUMBER}"
      echo "ARCHIVE_DIR=${ARCHIVE_DIR}"

      # Learn more about the available environment variables at:
      # https://console.bluemix.net/docs/services/ContinuousDelivery/pipeline_deploy_var.html#deliverypipeline_environment

      # To review or change build options use:
      # bx cr build --help

      echo "=========================================================="
      echo "Checking for Dockerfile at the repository root"
      if [ -f Dockerfile ]; then 
        echo "Dockerfile found"
      else
          echo "Dockerfile not found"
          exit 1
      fi

      echo "=========================================================="
      echo "Checking registry current plan and quota"
      bx cr plan
      bx cr quota
      echo "If needed, discard older images using: bx cr image-rm"

      echo "Checking registry namespace: ${REGISTRY_NAMESPACE}"
      NS=$( bx cr namespaces | grep ${REGISTRY_NAMESPACE} ||: )
      if [ -z "${NS}" ]; then
          echo "Registry namespace ${REGISTRY_NAMESPACE} not found, creating it."
          bx cr namespace-add ${REGISTRY_NAMESPACE}
          echo "Registry namespace ${REGISTRY_NAMESPACE} created."
      else 
          echo "Registry namespace ${REGISTRY_NAMESPACE} found."
      fi

      echo -e "Existing images in registry"
      bx cr images

      echo "=========================================================="
      echo -e "Building container image: ${IMAGE_NAME}:${BUILD_NUMBER}"
      set -x
      bx cr build -t ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${BUILD_NUMBER} .
      set +x
      bx cr image-inspect ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${BUILD_NUMBER}

      # When 'bx' commands are in the pipeline job config directly, the image URL will automatically be passed 
      # along with the build result as env variable PIPELINE_IMAGE_URL to any subsequent job consuming this build result. 
      # When the job is sourc'ing an external shell script, or to pass a different image URL than the one inferred by the pipeline,
      # please uncomment and modify the environment variable the following line.
      # export PIPELINE_IMAGE_URL="$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$BUILD_NUMBER"

      ######################################################################################
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
      ######################################################################################
      echo -e "Checking archive dir presence"
      mkdir -p $ARCHIVE_DIR

      # pass image information along via build.properties for Vulnerability Advisor scan
      echo "IMAGE_NAME=${IMAGE_NAME}" >> $ARCHIVE_DIR/build.properties
      echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $ARCHIVE_DIR/build.properties
      echo "REGISTRY_URL=${REGISTRY_URL}" >> $ARCHIVE_DIR/build.properties
      echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}" >> $ARCHIVE_DIR/build.properties
      echo "File 'build.properties' created for passing env variables to subsequent pipeline jobs:"
      cat $ARCHIVE_DIR/build.properties      

      #Update deployment.yml with image name
      if [ -f deployment.yml ]; then
          echo "UPDATING DEPLOYMENT MANIFEST:"
          sed -i "s~^\([[:blank:]]*\)image:.*$~\1image: ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${BUILD_NUMBER}~" deployment.yml
          cat deployment.yml
          if [ ! -f $ARCHIVE_DIR/deployment.yml ]; then # no need to copy if working in ./ already    
              cp deployment.yml $ARCHIVE_DIR/
          fi
      else 
          echo -e "${red}Kubernetes deployment file 'deployment.yml' not found at the repository root${no_color}"
          exit 1
      fi      
- name: VALIDATE
  inputs:
  - type: job
    stage: BUILD
    job: Container build
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file  
  jobs:
  - name: Vulnerability Advisor
    type: tester
    test_type: vulnerabilityadvisor
    use_image_from_build_input: true
    fail_stage: false
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_vulnerabilities.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_vulnerabilities.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_vulnerabilities.sh")
      # ------------------
      # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_vulnerabilities.sh
      # Input env variables (can be received via a pipeline environment properties.file.
      echo "IMAGE_NAME=${IMAGE_NAME}"
      echo "BUILD_NUMBER=${BUILD_NUMBER}"
      echo "REGISTRY_URL=${REGISTRY_URL}"
      echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}"
      #View build properties
      # cat build.properties
      # also run 'env' command to find all available env variables
      # or learn more about the available environment variables at:
      # https://console.bluemix.net/docs/services/ContinuousDelivery/pipeline_deploy_var.html#deliverypipeline_environment

      bx cr images
      PIPELINE_IMAGE_URL=$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$BUILD_NUMBER
      echo -e "Checking vulnerabilities in image: ${PIPELINE_IMAGE_URL}"
      for ITER in {1..30}
      do
        set +e
        STATUS=$( bx cr va -e -o json ${PIPELINE_IMAGE_URL} | jq '.[0].status' )
        set -e
        if [[ ${STATUS} == *OK* ]]; then
          break
        fi
        echo -e "${ITER} STATUS ${STATUS} : A vulnerability report was not found for the specified image."
        echo "Either the image doesn't exist or the scan hasn't completed yet. "
        echo "Waiting for scan to complete.."
        sleep 10
      done
      set +e
      bx cr va ${PIPELINE_IMAGE_URL}
      set -e
      [[ $(bx cr va -e -o json ${PIPELINE_IMAGE_URL} | jq '.[0].status') == *OK* ]] || { echo "ERROR: The vulnerability scan was not successful, check the OUTPUT of the command and try again."; exit 1; }
- name: DEPLOY
  inputs:
  - type: job
    stage: BUILD
    job: Container build
  jobs:
  - name: Deploy Kubernetes Pod
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      #set -x
      # copy the script below into your app code repo (e.g. ./scripts/deploy_kubectl.sh) and 'source' it from your pipeline job
      #    source ./scripts/deploy_kubectl.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/deploy_kubectl.sh")
      # ------------------
      # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/deploy_kubectl.sh
      # Input env variables (can be received via a pipeline environment properties.file.
      echo "BUILD_NUMBER=${BUILD_NUMBER}"
      echo "REGISTRY_URL=${REGISTRY_URL}"
      echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}"
      echo "REGISTRY_TOKEN=${REGISTRY_TOKEN}"
      #View build properties
      # cat build.properties
      # also run 'env' command to find all available env variables
      # or learn more about the available environment variables at:
      # https://console.bluemix.net/docs/services/ContinuousDelivery/pipeline_deploy_var.html#deliverypipeline_environment

      # Input env variables from pipeline job
      echo "PIPELINE_KUBERNETES_CLUSTER_NAME=${PIPELINE_KUBERNETES_CLUSTER_NAME}"
      echo "CLUSTER_NAMESPACE=${CLUSTER_NAMESPACE}"

      echo "=========================================================="
      #Check cluster availability
      IP_ADDR=$( bx cs workers $PIPELINE_KUBERNETES_CLUSTER_NAME | grep normal | head -n 1 | awk '{ print $2 }' )
      if [ -z "$IP_ADDR" ]; then
        echo "$PIPELINE_KUBERNETES_CLUSTER_NAME not created or workers not ready"
        exit 1
      fi
      #Connect to a different container-service api by uncommenting and specifying an api endpoint
      #bx cs init --host https://us-south.containers.bluemix.net
      echo ""
      echo "DEPLOYING USING MANIFEST:"
      cat deployment.yml
      kubectl apply -f deployment.yml  
      echo ""
      echo "DEPLOYED SERVICE:"
      kubectl describe services tjdev-lt-k8s-service
      echo ""
      echo "DEPLOYED PODS:"
      kubectl describe pods --selector app=tjdev-lt-k8s-app
      PORT=$( kubectl get services | grep tjdev-lt-k8s-service | sed 's/.*:\([0-9]*\).*/\1/g' )
      echo ""
      echo "VIEW THE APPLICATION AT: http://$IP_ADDR:$PORT"